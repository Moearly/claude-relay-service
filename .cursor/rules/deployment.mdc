---
description: 后端部署流程和最佳实践
---

# 后端部署指南

## 🚀 快速部署

### 推荐方式：使用优化部署脚本

```bash
cd /home/leiyi/codeSpace/ApiRelay/claude-relay-service
./scripts/deploy-optimized.sh
```

**特点**：
- ✅ 只需 3 次 SSH 连接（避免频率限制）
- ✅ 自动备份当前版本
- ✅ 自动上传代码文件
- ✅ 自动重启服务
- ✅ 健康检查验证
- ⏱️ 约 2 分钟完成

---

## 📋 部署前检查

### 1. 检查代码状态
```bash
cd claude-relay-service
git status

# 如有未提交的更改
git add .
git commit -m "your message"
```

### 2. 本地测试（可选）
```bash
# 代码检查
npm run lint

# 运行测试
export ADMIN_TOKEN="your-token"
node scripts/test-api.js
```

---

## 🔄 部署流程详解

### 部署脚本执行步骤

1. **第 1 次 SSH**：测试连接 + 备份
   ```bash
   # 连接服务器并备份当前版本
   ssh "cd /opt/claude-relay-service && tar -czf backups/backup_*.tar.gz src/routes/admin.js"
   sleep 15  # 等待避免频率限制
   ```

2. **SCP 上传**：上传代码文件
   ```bash
   # 上传修改的文件
   scp src/routes/admin.js root@156.229.163.86:/opt/claude-relay-service/src/routes/admin.js
   sleep 15
   ```

3. **第 2 次 SSH**：重启服务
   ```bash
   # 重启服务
   ssh "cd /opt/claude-relay-service && npm run service:restart"
   sleep 20  # 等待服务初始化
   ```

4. **第 3 次 SSH**：验证状态
   ```bash
   # 检查进程是否运行
   ssh "pgrep -f 'node.*app.js'"
   ```

5. **HTTP 健康检查**
   ```bash
   # 验证服务健康状态
   curl https://api.codewith.site/health
   ```

---

## ✅ 部署后验证

### 1. 检查服务状态
```bash
# 方式 1：使用脚本
./scripts/check-env.sh

# 方式 2：直接检查
curl https://api.codewith.site/health
```

**期望输出**：
```json
{
  "status": "healthy",
  "service": "claude-relay-service",
  "version": "1.1.182",
  "components": {
    "redis": {"status": "healthy"},
    "logger": {"status": "healthy"}
  }
}
```

### 2. 测试新增的 API
```bash
# 运行完整 API 测试
export ADMIN_TOKEN="your-admin-token"
node scripts/test-api.js
```

### 3. 查看服务日志
```bash
# 查看错误日志
./scripts/view-logs.sh -e -n 50

# 实时跟踪日志
./scripts/view-logs.sh -f
```

### 4. 检查进程状态
```bash
# SSH 到服务器
ssh root@156.229.163.86

# 查看进程
ps aux | grep 'node.*app.js'

# 查看端口
netstat -tlnp | grep 3000
```

---

## 🔧 服务管理命令

### 基本操作
```bash
# SSH 到服务器
ssh root@156.229.163.86
cd /opt/claude-relay-service

# 启动服务
npm run service:start:daemon

# 停止服务
npm run service:stop

# 重启服务
npm run service:restart

# 查看状态
npm run service:status

# 查看日志
npm run service:logs

# 实时日志
npm run service:logs:follow
```

### 手动操作（不推荐）
```bash
# 查找进程
ps aux | grep 'node.*app.js'

# 杀掉进程
pkill -9 -f 'node.*app.js'

# 清理端口
lsof -ti:3000 | xargs kill -9

# 启动服务
cd /opt/claude-relay-service
nohup npm run service:start:daemon &
```

---

## 🚨 常见问题

### 1. SSH 连接失败
**原因**：服务器对 SSH 连接频率有限制

**解决**：
```bash
# 等待 1-2 分钟后重试
sleep 120
./scripts/deploy-optimized.sh
```

### 2. 端口被占用
**错误**：`EADDRINUSE: address already in use 0.0.0.0:3000`

**解决**：
```bash
# 部署脚本会自动处理
# 或手动清理
ssh root@156.229.163.86 "pkill -9 -f 'node.*app.js'; lsof -ti:3000 | xargs kill -9"
```

### 3. 健康检查失败
**原因**：服务初始化需要时间

**解决**：
```bash
# 等待更长时间
sleep 30

# 手动检查
curl https://api.codewith.site/health

# 查看日志
./scripts/view-logs.sh -e
```

### 4. 文件上传失败
**原因**：SSH 连接断开

**解决**：
```bash
# 等待后重试
sleep 60
./scripts/deploy-optimized.sh
```

---

## 🔄 回滚操作

### 自动回滚
部署脚本会自动备份，失败时询问是否回滚

### 手动回滚
```bash
# SSH 到服务器
ssh root@156.229.163.86
cd /opt/claude-relay-service

# 查看备份
ls -lh backups/

# 恢复备份
tar -xzf backups/backup_YYYYMMDD_HHMMSS.tar.gz

# 重启服务
npm run service:restart
```

---

## 📊 监控和日志

### 查看日志
```bash
# 使用日志工具（推荐）
./scripts/view-logs.sh -f -e

# 手动查看
ssh root@156.229.163.86 "tail -f /opt/claude-relay-service/logs/*.log"
```

### 日志文件位置
- `logs/service.log` - 主服务日志
- `logs/requests.log` - 请求日志
- `logs/error.log` - 错误日志
- `logs/access.log` - 访问日志

### 监控指标
```bash
# 查看服务器资源
ssh root@156.229.163.86 "top -n 1 | head -20"

# 查看磁盘空间
ssh root@156.229.163.86 "df -h"

# 查看内存使用
ssh root@156.229.163.86 "free -h"
```

---

## 🎯 最佳实践

### 1. 使用优化的部署脚本
- ✅ 使用 `deploy-optimized.sh`
- ❌ 避免使用 `deploy.sh`（SSH 连接过多）

### 2. 部署前准备
- ✅ 提交代码到 Git
- ✅ 本地测试通过
- ✅ 检查环境配置

### 3. 部署后验证
- ✅ 运行健康检查
- ✅ 运行 API 测试
- ✅ 查看错误日志
- ✅ 测试关键功能

### 4. 定期维护
- ✅ 定期查看日志
- ✅ 监控服务器资源
- ✅ 清理旧备份文件
- ✅ 更新依赖包

### 5. 安全注意
- ⚠️ 不要在公开仓库提交密码
- ⚠️ 定期更换服务器密码
- ⚠️ 使用 SSH 密钥认证（推荐）
- ⚠️ 限制 SSH 访问 IP

---

## 📝 部署检查清单

### 部署前
- [ ] 代码已提交到 Git
- [ ] 本地测试通过
- [ ] 没有 Lint 错误
- [ ] 环境变量已配置
- [ ] 备份重要数据

### 部署中
- [ ] 部署脚本执行成功
- [ ] 文件上传完成
- [ ] 服务重启成功
- [ ] 进程运行正常

### 部署后
- [ ] 健康检查通过
- [ ] API 测试通过
- [ ] 没有错误日志
- [ ] 前端功能正常
- [ ] 关键功能测试通过

---

## 🔗 相关文档

- [快速部署指南](../../../QUICK_DEPLOY.md)
- [部署总结](../../../DEPLOYMENT_SUMMARY.md)
- [脚本说明](../../scripts/README.md)
- [故障排查](../../../commercial-website/.cursor/rules/troubleshooting.mdc)

---

## 📞 需要帮助？

### 查看日志
```bash
./scripts/view-logs.sh -e -n 100
```

### 检查环境
```bash
./scripts/check-env.sh
```

### 运行测试
```bash
export ADMIN_TOKEN="your-token"
node scripts/test-api.js
```

### 重新部署
```bash
./scripts/deploy-optimized.sh
```
